charmap("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ·.-*%⊏⊐⊑⊒[]_⎺")

vars /stats
    U stat_mode = 0

vars /record_state
    Bool recording = false
    Bool last_recording = false
    U cooldown = 0

vars /ppu
    UU roll_viz_addr = $2460
    U roll_viz_y = $14
    U waste_time = $00

vars /roll
    U[2] polls_this_frame = U[2](0, 0)
    U[2] polls_last_frame = U[2](0, 0)
    UU num_frames_recording = 0
    U subframe_index = 0
    Bool prev_poll_on = false
    Bool prev_nmi_poll_on = false
    Bool clear_offscreen = false

    U tap_count = 0
    UU start_index = 0
    UU end_index = 0

    U last_tap_count = 0
    UU last_end_index = 0

ct U[64] attr1 = U[64](
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $55, $55, $55, $55, $55, $55, $55, $55,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
)

fn load_bg()
    // Tell the NES which VRAM address we want to upload to:
    ppu_reset_addr($2000)

    // tiles for first nametable
    for UU i = 0; i < 960; i += 1
        {PPUDATA}('·')

    // attributes for first nametable
    for U i = 0; i < 64; i += 1
        {PPUDATA}(attr1[i])

    // tiles for second nametable
    for UU i = 0; i < 960; i += 1
        {PPUDATA}(0)

    // attributes for second nametable
    for U i = 0; i < 64; i += 1
        {PPUDATA}(%00000000)

fn update_sprites()
    U oam_index = 0
    if recording
        set_oam(oam_index, 12, 19, RECORD_SPRITE, %11)
        oam_index += 4
    // write hz sprites
    oam_index = main_hz_update_sprites(oam_index)
    // TODO: write probability sprites
    hide_oam(oam_index)


fn handle_poll()
: +inline
    fence
    Bool is_button_pressed = pads[0].held & (BUTTON_LEFT | BUTTON_RIGHT)
    if is_button_pressed
        cooldown = COOLDOWN_THRESHOLD
        if !recording
            // special case if recording begins with the nmi poll
            // done so the first poll which would be recognized by the
            // actual game lines up in all cases
            if subframe_index == 0
                num_frames_recording = 1
            else
                num_frames_recording = 0
            recording = true
            tap_count = 0
            start_index = (num_frames_recording << 4) + UU(subframe_index)
            end_index = start_index
            shift_nt1_offset()
        fence
        // updates polls this frame
        U i = subframe_index >> 3
        polls_this_frame[i] |= @powers_of_two[subframe_index & %111]
        if !prev_poll_on
            tap_count += 1
            end_index = (num_frames_recording << 4) + UU(subframe_index)
    fence
    // TODO: can be moved when buffer is refactored
    if subframe_index == 0 
        if !prev_nmi_poll_on && is_button_pressed
            play_sfx = true
        prev_nmi_poll_on = is_button_pressed
    prev_poll_on = is_button_pressed


fn shift_nt1_offset()
    // scroll up to push existing entries down
    roll_viz_addr -= $20 * ROW_HEIGHT
    if roll_viz_addr < $2400
        roll_viz_addr += $3C0
    if roll_viz_y < (ROW_HEIGHT << 3)
        roll_viz_y += ($F0 - (ROW_HEIGHT << 3)) // mod 240
    else
        roll_viz_y -= (ROW_HEIGHT << 3)

fn swap_chr_bank(U register, U bank)
: +inline
    fence
    {MMC3_BANK_SELECT}(%00000000 | (register << 7))
    {MMC3_BANK_DATA}(bank << 2)
    {MMC3_BANK_SELECT}(%00000001 | (register << 7))
    {MMC3_BANK_DATA}((bank << 2) + 2)
    fence

asm fn wait_for_last_poll()
: employs /hz
    default
    label loop
        lda &subframe_index
        cmp #$10
        bne loop
        rts

irq subframe_poll()
    // acknowledge pending irq, then immediately schedule next irq
    mmc3_timer(@scanline_intervals[subframe_index])
    // set scroll/change chr bank at specific index
    if subframe_index == 7
        fence
        waste_time += 1
        fence
        ppu_set_mid_scroll(0, roll_viz_y, 1)
        swap_chr_bank(0, 2)
    // poll controller (TODO: waste cycles for more accuracy??)
    poll_pads()
    update_pads()
    fence
    // if recording and L/R pressed, update active buffer with next tile
    handle_poll()
    subframe_index += 1

nmi main_nmi()
: employs /ppu
    // schedule irq for showing nt1
    mmc3_timer(@scanline_intervals[0])
    // make background bank normal
    swap_chr_bank(0, 0)
    // Update OAM and poll the pads (currently scanline 246, cycle 90)
    ppu_upload_oam_poll_pads(0)
    update_pads()
    fence
    if recording
        main_hz_update_bg()
        if num_frames_recording < UU(NUM_VISIBLE_FRAMES)
            // update frame row (2 tiles)
            U i = num_frames_recording.a << 1
            frame_row_update_bg()
            UU poll_addr = roll_viz_addr + UU(1 + i)
            if i >= NUM_VISIBLE_FRAMES
                poll_addr += 2
            ppu_reset_addr(poll_addr)
            {PPUDATA}(polls_this_frame[0])
            {PPUDATA}(polls_this_frame[1])
            polls_this_frame[0] = 0
            polls_this_frame[1] = 0

        num_frames_recording += 1
    else if clear_offscreen
        // clear all in the topmost invisible buffer
        // TODO: tune if necessary
        UU clear_addr = roll_viz_addr - UU($20 * ROW_HEIGHT)
        if clear_addr < $2400
            clear_addr += $3C0
        fence
        ppu_reset_addr(clear_addr)
        for U i = 0; i < 63; i += 1
            {PPUDATA}(0)
        fence
        clear_offscreen = false

    // "irq 0"
    subframe_index = 0
    fence
    handle_poll()
    fence
    subframe_index = 1 // MUST HAPPEN BEFORE END OF VBLANK
    // set scroll to show current roll viz row
    ppu_reset_mid_scroll(0, 0, 0)

mode main()
: nmi main_nmi
: irq subframe_poll
    // set the palette
    palette = START_PALETTE
    ppu_upload_palette()

    // set and load the level
    hide_oam(0)
    load_bg()
    main_hz_init_bg()
    frame_row_init_bg()

    //set mirroring
    {MMC3_MIRRORING}(0)


    // enable nmi, turn on rendering
    {PPUCTRL}(PPUCTRL_NMI_ON | PPUCTRL_SPR_PT_1000)
    nmi
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

    // enable irqs
    irq true

    // wait forever, one frame at a time:
    while true
        if last_recording
            main_hz_update_state()
        else if pads[0].pressed & BUTTON_START
            // change mode here
            stat_mode += 1
            if stat_mode >= NUM_STAT_MODES
                stat_mode = 0
            // schedule previous mode cleanup, new mode init
        else if pads[0].pressed & BUTTON_SELECT
            // reset stat mode

        update_sprites()
        // probably ok here since we're only checking polls at nmi (for now)
        update_audio()

        // wait for all polls to finish up
        fence
        wait_for_last_poll()
        fence

        if last_recording
            if cooldown == 0
                recording = false
                clear_offscreen = true
            else
                cooldown -= 1
                last_tap_count = tap_count
                last_end_index = end_index

        last_recording = recording
        polls_last_frame[0] = polls_this_frame[0]
        polls_last_frame[1] = polls_this_frame[1]
        nmi

chrrom
    file(fmt, "../chr/hud.png")
    file(fmt, "../chr/hud.png")
    file(fmt, "../chr/hz.png")
    file(fmt, "../chr/hz.png")
