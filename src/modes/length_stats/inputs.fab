data /length_stats_inputs
    [] input_title
        ("INPUT·STATS")

fn length_stats_inputs_init_bg()
    ppu_reset_addr($204F)
    for U i = 0; i < len(input_title); i += 1
        {PPUDATA}(@input_title[i])

fn length_stats_inputs_update_display_state()
    if frame_index > 29 || tap_count > 30
        return

    UUU variance_upper = udiv_24(times_25(ls_sum2_inputs), UU(tap_count << 2))
    UUU variance_lower = udiv_24(
        UUU(times_25(ls_sum_inputs * ls_sum_inputs)),
        UU(tap_count * tap_count) << 2
    )
    U clamped_tap = max(tap_count, 1)
    UU mean = UU(udiv_24(times_25(ls_sum_inputs), clamped_tap << 2))
    mean_digits = uu_to_ddddd(mean)
    // guaranteed to fit inside a UU given our constraints
    var_digits = uu_to_ddddd(UU(variance_upper - variance_lower))
    max_length = max_length_inputs
    min_length = min_length_inputs

fn length_stats_inputs_clean_bg()
    ppu_reset_addr($204F)
    for U i = 0; i < len(input_title); i += 1
        {PPUDATA}('·')
