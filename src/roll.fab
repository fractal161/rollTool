charmap("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ·.-*%⊏⊐⊑⊒[]_⎺")

vars /record_state
    Bool recording = false
    Bool last_recording = false
    U cooldown = 0
    Bool recording_just_finished = false
    Bool new_stat_mode = false

vars /ppu
    UU input_stream_addr = $2460
    U input_stream_y = $14
    U waste_time = $00

vars /roll
    UU polls_this_frame = 0
    UU polls_last_frame = 0
    UU frame_index = 0
    U subframe_index = 0

ct U[64] attr1 = U[64](
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $55, $55, $55, $55, $55, $55, $55, $55,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
)

fn load_bg()
    ppu_reset_addr($2000)
    // tiles for first nametable
    for UU i = 0; i < 960; i += 1
        {PPUDATA}('·')
    // attributes for first nametable
    for U i = 0; i < 64; i += 1
        {PPUDATA}(attr1[i])
    // tiles for second nametable
    for UU i = 0; i < 960; i += 1
        {PPUDATA}(0)
    // attributes for second nametable
    for U i = 0; i < 64; i += 1
        {PPUDATA}(%00000000)

fn update_sprites()
    U oam_index = 0
    if recording
        set_oam(oam_index, 12, 19, RECORD_SPRITE, %11)
        oam_index += 4
    // write hz sprites
    oam_index = main_hz_update_sprites(oam_index)
    oam_index = stat_update_sprites(oam_index)
    hide_oam(oam_index)


fn handle_poll()
: +inline
    set_breakpoint($4444)
    Bool is_button_pressed = pads[0].held & (BUTTON_LEFT | BUTTON_RIGHT)
    if !is_button_pressed
        return
    // updates polls this frame
    polls_this_frame |= UU(1) << subframe_index
    cooldown = COOLDOWN_THRESHOLD
    if !recording
        // special case if recording begins with the nmi poll
        // done so the first poll which would be recognized by the
        // actual game lines up in all cases
        if subframe_index == 0
            frame_index = 1
        else
            frame_index = 0
        recording = true
        
        main_hz_update_state_start()
        input_stream_update_state_start()
        stat_update_state_start()

fn swap_chr_bank(U register, U bank)
: +inline
    fence
    {MMC3_BANK_SELECT}(%00000000 | (register << 7))
    {MMC3_BANK_DATA}(bank << 2)
    {MMC3_BANK_SELECT}(%00000001 | (register << 7))
    {MMC3_BANK_DATA}((bank << 2) + 2)
    fence

asm fn wait_for_last_poll()
: employs /roll
    default
    label loop
        lda &subframe_index
        cmp #$10
        bne loop
        rts

irq subframe_poll()
    // acknowledge pending irq, then immediately schedule next irq
    mmc3_timer(@scanline_intervals[subframe_index])
    // set scroll/change chr bank at specific index
    if subframe_index == 7
        fence
        waste_time += 1
        fence
        ppu_set_mid_scroll(0, input_stream_y, 1)
        swap_chr_bank(0, 2)
    // poll controller (TODO: waste cycles for more accuracy??)
    poll_pads()
    update_pads()
    fence
    // if recording and L/R pressed, update active buffer with next tile
    handle_poll()
    subframe_index += 1

nmi main_nmi()
    // schedule irq for showing nt1
    mmc3_timer(@scanline_intervals[0])
    // make background bank normal
    swap_chr_bank(0, 0)
    // Update OAM and poll the pads (currently scanline 246, cycle 90)
    ppu_upload_oam_poll_pads(0)
    update_pads()

    if recording
        main_hz_update_bg()
        frame_row_update_bg()
        input_stream_update_bg_recording()

        polls_this_frame = 0
        frame_index += 1
    else if new_stat_mode
        stat_clean_bg()
        // change mode here
        stat_mode += 1
        if stat_mode >= NUM_STAT_MODES
            stat_mode = 0
        stat_init_bg()
        new_stat_mode = false

    else if recording_just_finished
        input_stream_update_bg_stop()
        recording_just_finished = false

    // "irq 0"
    subframe_index = 0
    handle_poll()
    subframe_index = 1 // MUST HAPPEN BEFORE END OF VBLANK
    // set scroll to show current roll viz row
    ppu_reset_mid_scroll(0, 0, 0)

mode main()
: nmi main_nmi
: irq subframe_poll
    // set the palette
    palette = START_PALETTE
    ppu_upload_palette()

    // set and load the level
    hide_oam(0)
    load_bg()
    main_hz_init_bg()
    frame_row_init_bg()
    stat_init_bg()

    //set mirroring
    {MMC3_MIRRORING}(0)

    // enable nmi, turn on rendering
    {PPUCTRL}(PPUCTRL_NMI_ON | PPUCTRL_SPR_PT_1000)
    nmi
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

    // enable irqs
    irq true

    // wait forever, one frame at a time:
    while true
        if last_recording
            // start by iterating through the polls of last frame
            UU polls = polls_last_frame
            for U i = 0; i < 16; i += 1
                Bool poll = polls & UU(1)
                main_hz_update_state_poll(i, poll)
                stat_update_state_poll(i, poll)
                prev_poll_on = poll
                polls >>= 1

            // then update any additional state
            main_hz_update_state_record()
            stat_update_state_record()
        else if pads[0].pressed & BUTTON_START
            // schedule previous mode cleanup, new mode init
            new_stat_mode = true
        else if pads[0].pressed & BUTTON_SELECT
            // reset stat mode

        update_sprites()
        // use polls_last_frame and polls_this_frame to decide
        // since this happens after nmi, guaranteed to work
        if polls_last_frame & UU(1) == 0 && polls_this_frame & UU(1) == 1
            update_audio()


        // wait for all polls to finish up
        fence
        wait_for_last_poll()
        fence

        if last_recording
            if cooldown == 0
                recording = false
                recording_just_finished = true
            else
                cooldown -= 1

        fence
        last_recording = recording
        polls_last_frame = polls_this_frame
        fence
        nmi

chrrom
    file(fmt, "../chr/hud.png")
    file(fmt, "../chr/hud.png")
    file(fmt, "../chr/hz.png")
    file(fmt, "../chr/hz.png")
