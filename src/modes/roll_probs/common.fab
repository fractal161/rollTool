/*
 * ROLL PROBS
 */

// packed_info consists of "length" (first 5 bits) and "tap count" (last 3 bits)
// $F0 is used to represent an uninitialized value, since a 1-tap must have
// a length of 0.
// hz can be calculated using 60*length / taps-1
struct TapInfo
    U packed_info
    U start_index

vars /roll_probs_core
    TapInfo[16] sub_info = TapInfo[16]()
    UU sub_prev_poll_on = 0

ct U[6] NUM_OFFSETS = U[6]($00, $E0, $F0, $00, $E0, $F0)

fn roll_probs_reset_state()
    for U i = 0; i < 16; i += 1
        sub_info[i].packed_info = $F0
    roll_probs_extra_reset_state()
    roll_probs_basic_reset_state()

fn roll_probs_update_state_start()
    for U i = 0; i < 16; i += 1
        sub_info[i].packed_info = $F0

fn roll_probs_update_state_poll(U i, Bool poll)
    // to update sub_prev_poll_on, shift in poll and shift out prev_poll
    Bool tmp_prev_poll_on = sub_prev_poll_on & UU(1)
    poll >=> sub_prev_poll_on
    if poll && !tmp_prev_poll_on
        U taps = sub_info[i].packed_info & %111
        // first input for subframe slice
        if sub_info[i].packed_info == $F0
            // length of 0 because first input, and 1 tap
            sub_info[i].packed_info = $00
            sub_info[i].start_index = frame_index.a
        // means there are less than 8 inputs
        else if taps != %111 && frame_index.a < 31
            U tap_len = frame_index.a - sub_info[i].start_index
            sub_info[i].packed_info = tap_len << 3 | (taps + 1)

fn get_hz_color_bcd(U i) U
    for U j = 0; j < 11; j += 1
        if i <= HZ_THRESHOLDS_BCD[j]
            return HZ_GRADIENT[j]
    return HZ_GRADIENT[11]

// placeholder for stat_handler
fn roll_probs_update_bg_stop()
