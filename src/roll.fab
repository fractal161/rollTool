charmap("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ·.-*%⊏⊐⊑⊒[]_⎺")

vars /record_state
    U cooldown = 0
    U recording_flags = 0
    U trans_flags = 0
    Pad nmi_pads

vars /ppu
    UU input_stream_addr = $2460
    U input_stream_y = $14

vars /roll
    UU polls_this_frame = 0
    UU polls_last_frame = 0
    UU frame_index = 0
    U subframe_index = 0

ct U[64] attr1 = U[64](
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $50, $50, $50, $50, $50, $50, $50, $50,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
    $00, $00, $00, $00, $00, $00, $00, $00,
)

fn load_bg()
    ppu_reset_addr($2000)
    // tiles for first nametable
    for UU i = 0; i < 960; i += 1
        {PPUDATA}('·')
    // attributes for first nametable
    for U i = 0; i < 64; i += 1
        {PPUDATA}(attr1[i])
    // tiles for second nametable
    for UU i = 0; i < 960; i += 1
        {PPUDATA}(0)
    // attributes for second nametable
    for U i = 0; i < 64; i += 1
        {PPUDATA}(%00000000)

fn update_sprites()
    U oam_index = 0
    if recording_flags & RECORDING
        oam_index = push_oam(oam_index, 12, 19, RECORD_SPRITE, %11)
    // write hz sprites
    oam_index = stat_update_sprites(oam_index)
    hide_oam(oam_index)


fn handle_poll()
: +inline
    // used for test_input
    set_breakpoint($4444)
    // ignore polls when stat mode is changing
    // TODO: may cause really subtle bugs, will have to think abt this more
    // p sure this is fine though
    if trans_flags != 0
        return
    Bool is_button_pressed = pads[0].held & (BUTTON_LEFT | BUTTON_RIGHT)
    if !is_button_pressed
        return
    // updates polls this frame
    polls_this_frame |= UU(1) << subframe_index
    cooldown = COOLDOWN_THRESHOLD
    if !(recording_flags & RECORDING)
        // special case if recording begins with the nmi poll
        // done so the first poll which would be recognized by the
        // actual game lines up in all cases
        if subframe_index == 0
            frame_index = 1
        else
            frame_index = 0
        recording_flags |= RECORDING
        
        main_hz_update_state_start()
        input_stream_update_state_start()
        stat_update_state_start()

fn swap_chr_bank(U register, U bank)
: +inline
    fence
    {MMC3_BANK_SELECT}(%00000000 | (register << 7))
    {MMC3_BANK_DATA}(bank << 2)
    {MMC3_BANK_SELECT}(%00000001 | (register << 7))
    {MMC3_BANK_DATA}((bank << 2) + 2)
    fence

asm fn wait_for_last_poll()
: employs /roll
    default
    label loop
        lda &subframe_index
        cmp #$10
        bne loop
        rts

// old version of the library function, which performs better but risks
// being glitchy if the hardware writes get reordered
fn old_ppu_set_mid_scroll(U x, U y, U nt)
: +inline
    {PPUADDR}(nt << 2)
    {PPUSCROLL}(y)
    {PPUSCROLL}(x)
    {PPUADDR}(((y & $F8) << 2) | (x >> 3))

irq subframe_poll()
    // acknowledge pending irq, then immediately schedule next irq
    mmc3_timer(@scanline_intervals[subframe_index])
    // set scroll/change chr bank at specific index
    if subframe_index == 7
        // each hardware read is 4 cpu cycles
        // using fences guarantees each of these is its own instruction
        {$100}()
        fence
        {$100}()
        fence
        {$100}()
        fence
        {$100}()
        fence
        old_ppu_set_mid_scroll(0, input_stream_y, 1)
        fence
        swap_chr_bank(0, 2)
    // poll controller (TODO: waste cycles for more accuracy??)
    poll_pads()
    update_pads()
    fence
    // if recording and L/R pressed, update active buffer with next tile
    handle_poll()
    subframe_index += 1

nmi main_nmi()
    // make background bank normal
    swap_chr_bank(0, 0)
    // Update OAM and poll the pads (currently scanline 246, cycle 90)
    ppu_upload_oam_poll_pads(0)
    update_pads()
    // update nmi pads (for actions that should occur once per frame)
    nmi_pads.pressed = ~nmi_pads.held & pads[0].held
    nmi_pads.held = pads[0].held
    fence
    if trans_flags & TRANS_MODE_CLEAN
        stat_clean_bg()
        // change mode here
        inc_stat_mode()
        trans_flags = TRANS_MODE_INIT
    else if trans_flags & TRANS_MODE_INIT
        stat_init_bg()
        trans_flags = 0
    else if trans_flags & TRANS_SUBMODE_CLEAN
        stat_clean_bg()
        inc_submode()
        trans_flags = TRANS_SUBMODE_INIT
    else if trans_flags & TRANS_SUBMODE_INIT
        stat_init_bg()
        trans_flags = 0
    else if recording_flags & RECORDING_JUST_FINISHED
        input_stream_update_bg_stop()
        recording_flags &= ~RECORDING_JUST_FINISHED
    else 
        main_hz_update_bg()
        frame_row_update_bg()
        input_stream_update_bg()
        stat_update_bg()

        if recording_flags & RECORDING
            polls_this_frame = 0
            frame_index += 1

    // schedule irq for showing nt1. this needs to happen *after* any
    // writes to $2006, since those writes may affect the scanline counter
    mmc3_timer(@scanline_intervals[0])

    // "irq 0"
    subframe_index = 0
    handle_poll()
    subframe_index = 1 // MUST HAPPEN BEFORE END OF VBLANK
    // set scroll to show current roll viz row
    ppu_reset_mid_scroll(0, 0, 0)

mode main()
: nmi main_nmi
: irq subframe_poll
    // set the palette
    palette = START_PALETTE
    ppu_upload_palette()

    // set and load the level
    hide_oam(0)
    load_bg()

    // init states of things
    roll_probs_reset_state()


    // initialize bg for each default mode
    main_hz_init_bg()
    frame_row_init_bg()
    stat_init_bg()

    //set mirroring
    {MMC3_MIRRORING}(0)

    // enable nmi, turn on rendering
    {PPUCTRL}(PPUCTRL_NMI_ON | PPUCTRL_SPR_PT_1000)
    nmi
    {PPUMASK}(PPUMASK_ON | PPUMASK_NO_CLIP)

    // enable irqs
    irq true

    // wait forever, one frame at a time:
    while true
        if recording_flags & LAST_RECORDING
            // start by iterating through the polls of last frame
            UU polls = polls_last_frame
            for U i = 0; i < 16; i += 1
                Bool poll = polls & UU(1)
                main_hz_update_state_poll(i, poll)
                stat_update_state_poll(i, poll)
                prev_poll_on = poll
                polls >>= 1

        else if nmi_pads.pressed & BUTTON_START
            if nmi_pads.held & BUTTON_A
            // schedule previous mode cleanup, new mode init
                trans_flags = TRANS_SUBMODE_CLEAN
            else
                trans_flags = TRANS_MODE_CLEAN
        else if nmi_pads.pressed & BUTTON_SELECT
            // reset stat mode

        // if no transitions are happening, we use polled state to figure out
        // what to display for the next frame
        if trans_flags == 0
            main_hz_update_display_state()
            stat_update_display_state()
        update_sprites()
        // use polls_last_frame and polls_this_frame to decide
        // since this happens after nmi, guaranteed to work
        if polls_last_frame & UU(1) == 0 && polls_this_frame & UU(1) == 1
            update_audio()


        // wait for all polls to finish up
        fence
        wait_for_last_poll()
        fence

        if recording_flags & LAST_RECORDING
            if cooldown == 0
                recording_flags &= ~RECORDING
                recording_flags |= RECORDING_JUST_FINISHED
            else
                cooldown -= 1

        fence
        if recording_flags & RECORDING
            recording_flags |= LAST_RECORDING
        else
            recording_flags &= ~LAST_RECORDING
        polls_last_frame = polls_this_frame
        fence
        nmi

chrrom
    file(fmt, "../chr/hud.png")
    file(fmt, "../chr/hud.png")
    file(fmt, "../chr/hz.png")
    file(fmt, "../chr/hz.png")
