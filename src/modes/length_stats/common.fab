/*
 * LENGTH STATS
 * roll lengths, and the like. will only keep stats during the first
 * 480 or so subframes, which should leave us with plenty of space
 */

vars /length_stats_core
    UU ls_sum = 0
    UUU ls_sum2 = 0
    UU current_length = 0
    UU max_length = 0
    UU min_length = 0

vars /length_stats_input
    U[5] mean_digits = U[5](0, 0, 0, 0, 0)
    U[5] var_digits = U[5](0, 0, 0, 0, 0)

data /length_stats_input
    [] ls_title 
        ("LENGTH·STATS")

ct U[17] decimals_16 = U[17](
    $00, $06, $13, $19, $25, $31, $38, $44,
    $50, $56, $63, $69, $75, $81, $88, $94,
    $A0
)

// updates the background for the current viz. assumes that it's already empty
fn length_stats_init_bg()
    ppu_reset_addr($204F)
    for U i = 0; i < len(ls_title); i += 1
        {PPUDATA}(@ls_title[i])
    ppu_reset_addr($208C)
    {PPUDATA}('M')
    {PPUDATA}('E')
    {PPUDATA}('A')
    {PPUDATA}('N')
    ppu_reset_addr($2092)
    {PPUDATA}('.')
    ppu_reset_addr($20CC)
    {PPUDATA}('V')
    {PPUDATA}('A')
    {PPUDATA}('R')
    ppu_reset_addr($20D2)
    {PPUDATA}('.')
    ppu_reset_addr($2096)
    {PPUDATA}('M')
    {PPUDATA}('A')
    {PPUDATA}('X')
    ppu_reset_addr($209B)
    {PPUDATA}('.')
    ppu_reset_addr($20D6)
    {PPUDATA}('M')
    {PPUDATA}('I')
    {PPUDATA}('N')
    ppu_reset_addr($20DB)
    {PPUDATA}('.')

fn length_stats_update_state_start()
    ls_sum = 0
    ls_sum2 = 0
    max_length = 0
    min_length = 0
    current_length = 0

fn length_stats_update_state_poll(U i, Bool poll)
    if frame_index > 29
        return
    if !poll && prev_poll_on
        // update sums
        ls_sum += current_length
        ls_sum2 += current_length * current_length
        max_length = max(current_length, max_length)
        if tap_count > 1
            min_length = min(current_length, min_length)
        else
            min_length = current_length
        current_length = 0
    else if poll
        current_length += 1

fn length_stats_update_display_state()
    if frame_index > 29 || tap_count > 30
        return
    UUU variance_upper = udiv_24(UUU(ls_sum2*25), UU(tap_count) << 2)
    UUU variance_lower = udiv_24(UUU(25*UUU(ls_sum * ls_sum)), UU(tap_count * tap_count) << 2)
    UU mean = UU(udiv_24(UUU(ls_sum*25), tap_count << 2))
    mean_digits = uu_to_ddddd(mean)
    // guaranteed to fit inside a UU given our constraints
    var_digits = uu_to_ddddd(UU(variance_upper - variance_lower))

fn length_stats_update_sprites(U oam_index) U
    // mean
    if mean_digits[3] > 0
        oam_index = push_oam(oam_index, 128, 31, mean_digits[3], %11)
    oam_index = push_oam(oam_index, 136, 31, mean_digits[2], %11)
    oam_index = push_oam(oam_index, 152, 31, mean_digits[1], %11)
    oam_index = push_oam(oam_index, 160, 31, mean_digits[0], %11)

    // variance
    if var_digits[3] > 0
        oam_index = push_oam(oam_index, 128, 47, var_digits[3], %11)
    oam_index = push_oam(oam_index, 136, 47, var_digits[2], %11)
    oam_index = push_oam(oam_index, 152, 47, var_digits[1], %11)
    oam_index = push_oam(oam_index, 160, 47, var_digits[0], %11)

    // max
    U max_high = max_length.b & %1111
    if max_high > 0
        oam_index = push_oam(oam_index, 200, 31, max_high, %11)
    oam_index = push_oam(oam_index, 208, 31, max_length.a >> 4, %11)
    U max_decimal = decimals_16[max_length.a & %1111]
    oam_index = push_oam(oam_index, 224, 31, max_decimal >> 4, %11)
    oam_index = push_oam(oam_index, 232, 31, max_decimal & %1111, %11)

    // min
    U min_high = min_length.b & %1111
    if min_high > 0
        oam_index = push_oam(oam_index, 200, 47, min_high, %11)
    oam_index = push_oam(oam_index, 208, 47, min_length.a >> 4, %11)
    U min_decimal = decimals_16[min_length.a & %1111]
    oam_index = push_oam(oam_index, 224, 47, min_decimal >> 4, %11)
    oam_index = push_oam(oam_index, 232, 47, min_decimal & %1111, %11)
    return oam_index

// placeholder for stat_handler
fn length_stats_update_bg()

// placeholder for stat_handler
fn length_stats_update_bg_stop()

// restores the background to empty
fn length_stats_clean_bg()
    ppu_reset_addr($204F)
    for U i = 0; i < len(ls_title); i += 1
        {PPUDATA}('·')
    ppu_reset_addr($208C)
    {PPUDATA}('·')
    {PPUDATA}('·')
    {PPUDATA}('·')
    {PPUDATA}('·')
    ppu_reset_addr($2092)
    {PPUDATA}('·')
    ppu_reset_addr($20CC)
    {PPUDATA}('·')
    {PPUDATA}('·')
    {PPUDATA}('·')
    ppu_reset_addr($20D2)
    {PPUDATA}('·')
    ppu_reset_addr($2096)
    {PPUDATA}('·')
    {PPUDATA}('·')
    {PPUDATA}('·')
    ppu_reset_addr($209B)
    {PPUDATA}('·')
    ppu_reset_addr($20D6)
    {PPUDATA}('·')
    {PPUDATA}('·')
    {PPUDATA}('·')
    ppu_reset_addr($20DB)
    {PPUDATA}('·')
